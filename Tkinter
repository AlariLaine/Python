import tkinter as tk
from tkinter import messagebox
import csv
import os
import random
import string

class ConferenceRegistrationApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Konverentsi Registreerimissüsteem")
        
        self.participants = []
        self.load_data()
        
        self.create_widgets()
    
    def create_widgets(self):
        # Participant Details Frame
        self.details_frame = tk.Frame(self.master)
        self.details_frame.pack(pady=10)
        
        tk.Label(self.details_frame, text="Nimi:").grid(row=0, column=0, sticky="w")
        self.name_entry = tk.Entry(self.details_frame)
        self.name_entry.grid(row=0, column=1)
        
        tk.Label(self.details_frame, text="Asutus:").grid(row=1, column=0, sticky="w")
        self.organization_entry = tk.Entry(self.details_frame)
        self.organization_entry.grid(row=1, column=1)
        
        tk.Label(self.details_frame, text="E-post:").grid(row=2, column=0, sticky="w")
        self.email_entry = tk.Entry(self.details_frame)
        self.email_entry.grid(row=2, column=1)
        
        tk.Label(self.details_frame, text="Telefon:").grid(row=3, column=0, sticky="w")
        self.phone_entry = tk.Entry(self.details_frame)
        self.phone_entry.grid(row=3, column=1)
        
        tk.Label(self.details_frame, text="Esitluse Pealkiri:").grid(row=4, column=0, sticky="w")
        self.presentation_entry = tk.Entry(self.details_frame)
        self.presentation_entry.grid(row=4, column=1)
        
        # Buttons Frame
        self.buttons_frame = tk.Frame(self.master)
        self.buttons_frame.pack(pady=10)
        
        self.add_button = tk.Button(self.buttons_frame, text="Lisa osaleja", command=self.add_participant)
        self.add_button.grid(row=0, column=0, padx=5)
        
        self.delete_button = tk.Button(self.buttons_frame, text="Kustuta osaleja", command=self.delete_participant)
        self.delete_button.grid(row=0, column=1, padx=5)
        
        self.save_button = tk.Button(self.buttons_frame, text="Salvesta andmed", command=self.save_data)
        self.save_button.grid(row=0, column=2, padx=5)
        
        # Participants Listbox
        self.participants_listbox = tk.Listbox(self.master, width=50)
        self.participants_listbox.pack(pady=10)
        self.populate_listbox()
        self.participants_listbox.bind("<<ListboxSelect>>", self.populate_fields)
    
    def populate_listbox(self):
        self.participants_listbox.delete(0, tk.END)
        for participant in self.participants:
            self.participants_listbox.insert(tk.END, f"{participant['id']} - {participant['name']}")
    
    def populate_fields(self, event):
        if self.participants_listbox.curselection():
            index = self.participants_listbox.curselection()[0]
            participant = self.participants[index]
            self.name_entry.delete(0, tk.END)
            self.name_entry.insert(tk.END, participant['name'])
            self.organization_entry.delete(0, tk.END)
            self.organization_entry.insert(tk.END, participant['organization'])
            self.email_entry.delete(0, tk.END)
            self.email_entry.insert(tk.END, participant['email'])
            self.phone_entry.delete(0, tk.END)
            self.phone_entry.insert(tk.END, participant['phone'])
            self.presentation_entry.delete(0, tk.END)
            self.presentation_entry.insert(tk.END, participant['presentation'])
    
    def add_participant(self):
        name = self.name_entry.get()
        organization = self.organization_entry.get()
        email = self.email_entry.get()
        phone = self.phone_entry.get()
        presentation = self.presentation_entry.get()
        
        if name and organization and email and phone and presentation:
            participant_id = self.generate_id()
            participant = {
                'id': participant_id,
                'name': name,
                'organization': organization,
                'email': email,
                'phone': phone,
                'presentation': presentation
            }
            self.participants.append(participant)
            self.populate_listbox()
            self.clear_fields()
        else:
            messagebox.showwarning("Tähelepanu!", "Palun täitke kõik väljad.")
    
    def delete_participant(self):
        if self.participants_listbox.curselection():
            index = self.participants_listbox.curselection()[0]
            self.participants.pop(index)
            self.populate_listbox()
            self.clear_fields()
    
    def clear_fields(self):
        self.name_entry.delete(0, tk.END)
        self.organization_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.presentation_entry.delete(0, tk.END)
    
    def generate_id(self):
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    
    def save_data(self):
        with open("participants.csv", mode="w", newline='') as file:
            writer = csv.DictWriter(file, fieldnames=['id', 'name', 'organization', 'email', 'phone', 'presentation'])
            writer.writeheader()
            writer.writerows(self.participants)
        messagebox.showinfo("Info", "Andmed on salvestatud.")
    
    def load_data(self):
        if os.path.exists("participants.csv"):
            with open("participants.csv", mode="r") as file:
                reader = csv.DictReader(file)
                self.participants = list(reader)

def main():
    root = tk.Tk()
    app = ConferenceRegistrationApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
